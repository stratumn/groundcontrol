"""Dynamic indicates a property is dynamically computed and is not stored in the model. Note that dynamic fields don't trigger Stored subscriptions."""
directive @dynamic on FIELD_DEFINITION
"""Relate indicates a field references another Node."""
directive @relate(
  """GoIDFieldName is the name of the field for the ID of the referenced Node that will be used in the Go Struct."""
  goIdFieldName: String
) on FIELD_DEFINITION
"""Paginate indicates a field that references a collection of Nodes using Relay pagination."""
directive @paginate(
  """GoIDSFieldName is the name of the field for the IDs of the referenced Nodes that will be used in the Go Struct."""
  goIdsFieldName: String
) on FIELD_DEFINITION
"""Job indicates a mutation that queues one or multiple job."""
directive @job on FIELD_DEFINITION
"""Stored indicates a subscription that emits a message when a Node is stored."""
directive @stored on FIELD_DEFINITION
"""Deleted indicates a subscription that emits a message when a Node is deleted."""
directive @deleted on FIELD_DEFINITION

"""DateTime is a date and time serialized as a string using the format `2006-01-02T15:04:05-0700`."""
scalar DateTime

"""Hash contains a hash, usually from Git, serialized as a string using base64 encoding."""
scalar Hash

"""JobStatus is the status of a Job in the queue."""
enum JobStatus {
  """QUEUED indicates the Job is waiting in the queue."""
  QUEUED
  """RUNNING indicates the Job is currently running."""
  RUNNING
  """STOPPING indicates the Job was asked to stop."""
  STOPPING
  """DONE indicates the Job completed successfully."""
  DONE
  """FAILED indicates the Job failed to complete."""
  FAILED
}

"""JobPriority is the priority of a Job in the queue."""
enum JobPriority {
  """NORMAL is usually used for periodic job."""
  NORMAL
  """HIGH is usually used for Jobs that were triggered by a User action."""
  HIGH
}

"""ProcessStatus is the status of a Process."""
enum ProcessStatus {
  """RUNNING indicates the Process is currently running."""
  RUNNING
  """STOPPING indicates the Process was asked to stop."""
  STOPPING
  """DONE indicates the Process exited successfully."""
  DONE
  """FAILED indicates the Process exited with an error."""
  FAILED
}

"""LogLevel represents how important a LogEntry is."""
enum LogLevel {
  """DEBUG is used by developers to debug the application."""
  DEBUG
  """INFO indicates normal behavior."""
  INFO
  """WARNING indicates a potential issue."""
  WARNING
  """ERROR indicates an important issue."""
  ERROR
}

"""Node is a Relay node."""
interface Node {
  """ID is the global ID of the Node."""
  id: ID!
}

"""Source is is a collection of workspaces and tasks."""
interface Source {
  """ID is the global ID of the Node."""
  id: ID!
  """User is the user who owns the Source."""
  user: User!
  """Workspaces lists the workspaces defined by the Source using Relay pagination."""
  workspaces(after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  """IsLoading indicates whether the Source is currently loading workspaces."""
  isLoading: Boolean!
}

"""DirectorySourceInput contains fields to create a DirectorySource. See DirectorySource."""
input DirectorySourceInput {
  directory: String!
}

"""GitSourceInput contains fields to create a GitSource. See GitSource."""
input GitSourceInput {
  repository: String!
  reference: String!
}

"""VariableInput contains fields to create a Variable. See Variable."""
input VariableInput {
  name: String!
  value: String!
  save: Boolean!
}

"""KeyInput contains fields to set a Key. See KeyInput."""
input KeyInput {
  name: String!
  value: String!
}

"""PageInfo contains Relay pagination info."""
type PageInfo {
  """HasNextPage indicates whether there is a next page."""
  hasNextPage: Boolean!
  """HasPreviousPage indicates whether there is a previous page."""
  hasPreviousPage: Boolean!
  """EndCursor points to the last Edge."""
  endCursor: String!
  """StartCursor points pointing to the first Edge."""
  startCursor: String!
}

"""SourceConnection is a Relay Connection for a page of Sources."""
type SourceConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [SourceEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""SourceEdge is a Relay Edge for a Source."""
type SourceEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Source!
}

"""WorkspaceConnection is a Relay Connection for a page of Workspaces."""
type WorkspaceConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [WorkspaceEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""WorkspaceEdge is a Relay Edge for a Workspace."""
type WorkspaceEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Workspace!
}

"""ProjectConnection is a Relay Connection for a page of Projects."""
type ProjectConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [ProjectEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""ProjectEdge is a Relay Edge for a Project."""
type ProjectEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Project!
}

"""CommitConnection is a Relay Connection for a page of Commits."""
type CommitConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [CommitEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
} 

"""CommitEdge is a Relay Edge for a Commit."""
type CommitEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Commit!
}

"""TaskConnection is a Relay Connection for a page of Tasks."""
type TaskConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [TaskEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""TaskEdge is a Relay Edge for a Task."""
type TaskEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Task!
}

"""VariableConnection is a Relay Connection for a page of Variables."""
type VariableConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [VariableEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""VariableEdge is a Relay Edge for a Variable."""
type VariableEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Variable!
}

"""StepConnection is a Relay Connection for a page of Steps."""
type StepConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [StepEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""StepEdge is a Relay Edge for a Step."""
type StepEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Step!
}

"""CommandConnection is a Relay Connection for a page of Commands."""
type CommandConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [CommandEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""CommandEdge is a Relay Edge for a Command."""
type CommandEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Command!
}

"""KeyConnection is a Relay Connection for a page of Keys."""
type KeyConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [KeyEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""KeyEdge is a Relay Edge for a Key."""
type KeyEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Key!
}

"""JobConnection is a Relay Connection for a page of job."""
type JobConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [JobEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""JobEdge is a Relay Edge for a Job."""
type JobEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Job!
}

"""ProcessGroupConnection is a Relay Connection for a page of ProcessGroups."""
type ProcessGroupConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [ProcessGroupEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""ProcessGroupEdge is a Relay Edge for a ProcessGroup."""
type ProcessGroupEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: ProcessGroup!
}

"""ProcessConnection is a Relay Connection for a page of Processes."""
type ProcessConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [ProcessEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""ProcessEdge is a Relay Edge for a Process."""
type ProcessEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: Process!
}

"""LogEntryConnection is a Relay Connection for a page of LogEntries."""
type LogEntryConnection {
  """Edges contains an array of Edge in the current page."""
  edges: [LogEntryEdge!]!
  """PaginationInfo contains metadata about the current page."""
  pageInfo: PageInfo!
}

"""LogEntryEdge is a Relay Edge for a LogEntry."""
type LogEntryEdge {
  """Cursor is used to paginate Nodes relative to this Edge."""
  cursor: String!
  """Node is the Node pointed by the Edge."""
  node: LogEntry!
}

"""User is a person using Ground Control."""
type User implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Sources lists the sources belonging to the User using Relay pagination."""
  sources(after: String, before: String, first: Int, last: Int): SourceConnection! @paginate
  """Workspaces lists the workspaces belonging to the User using Relay pagination."""
  workspaces(after: String, before: String, first: Int, last: Int): WorkspaceConnection! @dynamic
  """Workspace find a workspace by its slug."""
  workspace(slug: String!): Workspace @dynamic
  """Projects lists the projects belonging to the User using Relay pagination."""
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection! @dynamic
  """Keys lists the keys belonging to the User using Relay pagination."""
  keys(after: String, before: String, first: Int, last: Int): KeyConnection! @paginate
}

"""System contains information about Ground Control."""
type System implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Jobs lists the Jobs using Relay pagination optionally filtered by JobStatus."""
  jobs(after: String, before: String, first: Int, last: Int, status: [JobStatus!]): JobConnection! @paginate
  """ProcessGroups lists the ProcessGroups using Relay pagination optionally filtered by ProcessStatus."""
  processGroups(after: String, before: String, first: Int, last: Int, status: [ProcessStatus!]): ProcessGroupConnection! @paginate
  """LogEntries lists the LogEntries using Relay pagination optionally filtered by Level and by the Node who owns the LogEntry."""
  logEntries(after: String, before: String, first: Int, last: Int, level: [LogLevel!], ownerId: ID): LogEntryConnection! @paginate
  """JobMetrics are the JobMetrics for the System."""
  jobMetrics: JobMetrics! @relate
  """ProcessMetrics are the ProcessMetrics for the System."""
  processMetrics: ProcessMetrics! @relate
  """JobMetrics are the JobMetrics for the System."""
  logMetrics: LogMetrics! @relate
  """LastMessageID is the ID of the last PubSub message and can be used to not miss any message when subscribing."""
  lastMessageId: ID! @dynamic
}

"""DirectorySource is a collection of Workspaces in a directory."""
type DirectorySource implements Node & Source {
  """ID is the global ID of the Node."""
  id: ID!
  """User is the user who owns the Source."""
  user: User! @relate
  """Workspaces lists the workspaces defined by the Source using Relay pagination."""
  workspaces(after: String, before: String, first: Int, last: Int): WorkspaceConnection! @paginate
  """IsLoading indicates whether the Source is currently loading workspaces."""
  isLoading: Boolean!
  """Directory is the path to the directory containing the workspaces."""
  directory: String!
}

"""GitSource is a collection of Workspaces in a Git repository."""
type GitSource implements Node & Source {
  """ID is the global ID of the Node."""
  id: ID!
  """User is the user who owns the Source."""
  user: User! @relate
  """Workspaces lists the workspaces defined by the Source using Relay pagination."""
  workspaces(after: String, before: String, first: Int, last: Int): WorkspaceConnection! @paginate
  """IsLoading indicates whether the Source is currently loading workspaces."""
  isLoading: Boolean!
  """Repository is a Git repository to track."""
  repository: String!
  """Reference is the Git reference to track."""
  reference: String!
  """ReferenceShort is the short name of the Reference."""
  referenceShort: String! @dynamic
  """IsCloned indicates whether the repository is cloned."""
  isCloned: Boolean! @dynamic
}

"""Workspace is a collection of Projects and Tasks."""
type Workspace implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Slug is the unique URL friendly identifier."""
  slug: String!
  """Name is the human friendly name."""
  name: String!
  """Source is the source which this Workspace is part of."""
  source: Source! @relate
  """Projects lists the projects within the Workspace using Relay pagination."""
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection! @paginate
  """Tasks lists the tasks of the Workspace using Relay pagination."""
  tasks(after: String, before: String, first: Int, last: Int): TaskConnection! @paginate
  """Description is an optional description."""
  description: String
  """Notes contains optional notes."""
  notes: String
  """IsCloning indicates whether any of the Projects is currently cloning."""
  isCloning: Boolean! @dynamic
  """IsCloned indicates whether all Projects are cloned."""
  isCloned: Boolean! @dynamic
  """IsPulling indicates whether any of the Projects is currently pulling."""
  isPulling: Boolean! @dynamic
  """IsBehind indicates whether any of the Projects is behind. See Project."""
  isBehind: Boolean! @dynamic
  """IsAhead indicates whether any of the Projects is ahead. See Project."""
  isAhead: Boolean! @dynamic
  """IsClean indicates whether all Projects are clean. See Project."""
  isClean: Boolean! @dynamic
}

"""Project tracks a Git repository and reference."""
type Project implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Slug is the unique URL friendly identifier within the Workspace."""
  slug: String!
  """Repository is the Git repository to track."""
  repository: String!
  """Reference is the Git reference to track."""
  reference: String!
  """RemoteReference is the remote Git reference."""
  remoteReference: String!
  """LocalReference is the local Git reference."""
  localReference: String!
  """ReferenceShort is he short name of the Reference."""
  referenceShort: String! @dynamic
  """RemoteReferenceShort is he short name of the RemoteReference."""
  remoteReferenceShort: String! @dynamic
  """LocalReferenceShort is he short name of the LocalReference."""
  localReferenceShort: String! @dynamic
  """Description is an optional description."""
  description: String
  """Path is the path to the project."""
  path: String! @dynamic
  """Path is the path to the project relative to the home directory."""
  shortPath: String! @dynamic
  """RemoteCommits lists the remote Commits using Relay pagination."""
  remoteCommits(after: String, before: String, first: Int, last: Int): CommitConnection! @paginate
  """LocalCommits lists the local Commits using Relay pagination."""
  localCommits(after: String, before: String, first: Int, last: Int): CommitConnection! @paginate
  """Workspace is the Workspace this Project is part of."""
  workspace: Workspace! @relate
  """IsLoadingCommits indicates whether Commits are currently being loaded."""
  isLoadingCommits: Boolean!
  """IsCloning indicates whether the repository is being cloned."""
  isCloning: Boolean!
  """IsCloned indicates whether the repository is cloned."""
  isCloned: Boolean! @dynamic
  """IsCloned indicates whether the repository is currently being pulled."""
  isPulling: Boolean!
  """IsBehind indicates whether the remote Git repository has Commits not in the local branch."""
  isBehind: Boolean!
  """IsAhead indicates whether the local Git branch has Commits not in the remote repository."""
  isAhead: Boolean!
  """IsClean indicates whether there are uncommitted changes."""
  isClean: Boolean!
}

"""A Git commit."""
type Commit implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Hash is the Git hash."""
  hash: Hash!
  """Headline is the first line of the message."""
  headline: String!
  """Message is the message of the Commit."""
  message: String!
  """Author is the name of the committer."""
  author: String!
  """Date is the date of the Commit committed."""
  date: DateTime!
}

"""Task is a sequence of Steps to execute on a Workspace."""
type Task implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Name is the human friendly name."""
  name: String!
  """Variables lists the Variables using Relay pagination."""
  variables(after: String, before: String, first: Int, last: Int): VariableConnection! @paginate
  """Steps lists the Steps using Relay pagination."""
  steps(after: String, before: String, first: Int, last: Int): StepConnection! @paginate
  """Workspace is Workspace that defines this Task."""
  workspace: Workspace! @relate
  """IsRunning indicates whether the task is currently running."""
  isRunning: Boolean!
}

"""Variable is a value that can be set before executing a Task."""
type Variable implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Name is the unique name of the Variable."""
  name: String!
  """Default is the default value of the Variable."""
  default: String
}

"""Step is a sequence of commands to execute on Projects."""
type Step implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """The projects using Relay pagination."""
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection! @paginate
  """The commands using Relay pagination."""
  commands(after: String, before: String, first: Int, last: Int): CommandConnection! @paginate
  """The parent task."""
  task: Task! @relate
}

"""Command is a shell command to execute."""
type Command implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Command is the actual shell command."""
  command: String!
}

"""Key stores a value that can be used to set and save Task Variables."""
type Key implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Name is the unique name of the Key."""
  name: String!
  """Value is the value of the Key."""
  value: String!
}

"""Job are put in the queue to do work that takes too long to process immediately."""
type Job implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Name is the human frienly name."""
  name: String!
  """CreatedAt is the date it was created."""
  createdAt: DateTime!
  """UpdatedAt is the date it was updated."""
  updatedAt: DateTime!
  """Status is the JobStatus."""
  status: JobStatus!
  """Priority is the JobPriority."""
  priority: JobPriority!
  """Owner is the Node who owns the Job."""
  owner: Node! @relate
}

"""ProcessGroup groups processes launched by a Task."""
type ProcessGroup implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """CreatedAt is the date it was created."""
  createdAt: DateTime!
  """Status is the ProcessStatus."""
  status: ProcessStatus! @dynamic
  """Task is the Task that created the Processes."""
  task: Task! @relate
  """Processes lists the processes using Relay pagination."""
  processes(after: String, before: String, first: Int, last: Int): ProcessConnection! @paginate
}

"""Process is a program running in the background."""
type Process implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Command is the shell command used to launch the Process."""
  command: String!
  """Env is the environment of the Process. Each entry is of the form 'key=value'."""
  env: [String!]
  """Status is the ProcessStatus."""
  status: ProcessStatus!
  """ProcessGroup is the ProcessGroup this Process is part of."""
  processGroup: ProcessGroup! @relate
  """Project is the Project this Process was launched in."""
  project: Project! @relate
}

"""LogEntry is an entry in the logs."""
type LogEntry implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Level is the LogLevel."""
  level: LogLevel!
  """When it was created."""
  createdAt: DateTime!
  """Message is the content of the log message."""
  message: String!
  """Owner is the Node who owns the Job."""
  owner: Node @relate
  """SourceFile is a path to a source file using the format `/path/to/file:line?:offset?`, if one was found in the message."""
  sourceFile: String
  """SourceFileBegin is the offset in the message where the path to a source file begins."""
  sourceFileBegin: Int
  """SourceFileEnd is the offset in the message where the path to a source file ends."""
  sourceFileEnd: Int
}

"""JobMetrics contains metrics related to job."""
type JobMetrics implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Running tracks how many Jobs are QUEUED."""
  queued: Int!
  """Running tracks how many Jobs are RUNNING."""
  running: Int!
  """Done tracks how many Jobs are DONE."""
  done: Int!
  """Failed tracks wow many Jobs FAILED."""
  failed: Int!
}

"""ProcessMetrics contains metrics related to Processes."""
type ProcessMetrics implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Running tracks how many Processes are RUNNING."""
  running: Int!
  """Done tracks how many Processes are DONE."""
  done: Int!
  """Failed tracks wow many Processes FAILED."""
  failed: Int!
}

"""LogMetrics contains metrics related to LogEntries."""
type LogMetrics implements Node {
  """ID is the global ID of the Node."""
  id: ID!
  """Debug tracks how many DEBUG LogEntries there are."""
  debug: Int!
  """Info tracks how many INFO LogEntries there are."""
  info: Int!
  """Warning tracks how many WARNING LogEntries there are."""
  warning: Int!
  """Error tracks how many ERROR LogEntries there are."""
  error: Int!
}

"""Ok is returned by mutations when there isn't much else to say."""
type Ok {
  """Ok is there because a field is required."""
  ok: Boolean!
}

"""DeletedNode is deleted node."""
type DeletedNode {
  """ID is the global ID of the deleted Node."""
  id: ID!
}

"""Query is the root query resolver."""
type Query {
  """Node finds a node from a global ID."""
  node(id: ID!): Node
  """The person using the app."""
  viewer: User!
  """Information about the running app."""
  system: System!
}

"""Mutation is the root mutation resolver."""
type Mutation {
  """AddDirectorySource add a DirectorySource."""
  addDirectorySource(input: DirectorySourceInput!): DirectorySource!
  """AddGitSource adds a GitSource."""
  addGitSource(input: GitSourceInput!): GitSource!
  """DeleteSource deletes a Source."""
  deleteSource(id: ID!): DeletedNode!
  """LoadProjectCommits queues a Job to load the Commits of a Project."""
  loadProjectCommits(id: String!): Job! @job
  """loadWorkspaceCommits queues a Job to load the commits of all the Projects of a Workspace."""
  loadWorkspaceCommits(id: String!): [Job!]! @job
  """CloneProject queues a Job to clone a Project."""
  cloneProject(id: String!): Job! @job
  """CloneWorkspace queues a Job to clone all the Projects of a Workspace."""
  cloneWorkspace(id: String!): [Job!]! @job
  """PullProject queues a Job to pull a Project."""
  pullProject(id: String!): Job! @job
  """PullWorkspace queues a Job to pull all the Projects of a Workspace."""
  pullWorkspace(id: String!): [Job!]! @job
  """Run queues a Job to run a Task."""
  run(id: String!, variables: [VariableInput!]): Job!
  """SetKey sets a Key."""
  setKey(input: KeyInput!): Key!
  """DeleteKey deletes a Key."""
  deleteKey(id: ID!): DeletedNode!
  """StopJob stops a RUNNING Job."""
  stopJob(id: String!): Job!
  """StartProcessGroup starts all the Processes of a ProcessGroup."""
  startProcessGroup(id: String!): ProcessGroup!
  """StopProcessGroup stops all the Processes of a ProcessGroup."""
  stopProcessGroup(id: String!): ProcessGroup!
  """StartProcess starts a Process."""
  startProcess(id: String!): Process!
  """StopProcess stops a Process."""
  stopProcess(id: String!): Process!
  """OpenEditor opens the text editor."""
  openEditor(filename: String!): Ok!
}

"""Subscription is the root subscription resolver."""
type Subscription {
  """UserStored sends a User when added or updated."""
  userStored(id: ID, lastMessageId: ID): User! @stored
  """SystemStored sends a System when added or updated."""
  systemStored(id: ID, lastMessageId: ID): System! @stored
  """DirectorySourceStored sends a DirectorySource when added or updated."""
  directorySourceStored(id: ID, lastMessageId: ID): DirectorySource! @stored
  """DirectorySourceDeleted sends a message when a DirectorySource is deleted."""
  directorySourceDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """GitSourceStored sends a GitSource when added or updated."""
  gitSourceStored(id: ID, lastMessageId: ID): GitSource! @stored
  """GitSourceDeleted sends a message when a GitSource is deleted."""
  gitSourceDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """SourceStored sends a Source when added or updated."""
  sourceStored(id: ID, lastMessageId: ID): Source!
  """SourceDeleted sends a message when a Source is deleted."""
  sourceDeleted(id: ID, lastMessageId: ID): DeletedNode!
  """WorkspaceStored sends a Workspace when added updated."""
  workspaceStored(id: ID, lastMessageId: ID): Workspace! @stored
  """WorkspaceDeleted sends a message when a Workspace is deleted."""
  workspaceDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """ProjectStored sends a Project when added or updated."""
  projectStored(id: ID, lastMessageId: ID): Project! @stored
  """ProjectDeleted sends a message when a Project is deleted."""
  projectDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """TaskStored sends a Task when added or updated."""
  taskStored(id: ID, lastMessageId: ID): Task! @stored
  """TaskDeleted sends a Message when a Task is deleted."""
  taskDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """KeyStored sends a Key when added or updated."""
  keyStored(id: ID, lastMessageId: ID): Key! @stored
  """KeyDeleted sends a message when a Key is deleted."""
  keyDeleted(id: ID, lastMessageId: ID): DeletedNode! @deleted
  """JobStored sends a Job when added or updated."""
  jobStored(id: ID, lastMessageId: ID): Job! @stored
  """ProcessGroupStored sends a ProcessGroup when added or updated."""
  processGroupStored(id: ID, lastMessageId: ID): ProcessGroup! @stored
  """ProcessStored sends a Process when added or updated."""
  processStored(id: ID, lastMessageId: ID): Process! @stored
  """LogEntryStored sends a LogEntry when added or updated."""
  logEntryStored(id: ID, lastMessageId: ID): LogEntry! @stored
  """JobMetricsStored sends a JobMetrics when added or updated."""
  jobMetricsStored(id: ID, lastMessageId: ID): JobMetrics! @stored
  """ProcessMetricsStored sends a ProcessMetrics when added or updated."""
  processMetricsStored(id: ID, lastMessageId: ID): ProcessMetrics! @stored
  """LogMetricsStored sends a LogMetrics when added or updated."""
  logMetricsStored(id: ID, lastMessageId: ID): LogMetrics! @stored
}
