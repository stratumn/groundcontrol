{{ reserveImport "context" }}

{{ reserveImport "groundcontrol/appcontext" }}
{{ reserveImport "groundcontrol/relay" }}
{{ reserveImport "groundcontrol/store" }}

// Node types.
const (
	{{ range $model := .Models }}
		{{- range $iface := .Implements }}
			{{- if (eq $iface "Node") }}
				NodeType{{ $model.Name }} = "{{ $model.Name }}"
		{{- end -}}
		{{- end -}}
	{{- end}}
)

// Message types.
const (
	{{ range $model := .Models }}
		{{- range $iface := .Implements }}
			{{- if (eq $iface "Node") }}
				MessageType{{ $model.Name }}Stored = "{{ $model.Name }}Stored"
				MessageType{{ $model.Name }}Deleted = "{{ $model.Name }}Deleted"
		{{- end -}}
		{{- end -}}
	{{- end}}
)

// LoadNode loads a Node.
func LoadNode(ctx context.Context, id string) (store.Node, error) {
	node, ok := appcontext.Get(ctx).Nodes.Load(id)
	if !ok {
		return nil, ErrNotFound
	}
	return node, nil
}

// MustLoadNode loads a Node or panics on failure.
func MustLoadNode(ctx context.Context, id string) store.Node {
	node, ok := appcontext.Get(ctx).Nodes.Load(id)
	if !ok {
		panic(ErrNotFound)
	}
	return node
}

{{ range $model := .Models }}
	{{- range $iface := .Implements }}
		{{- if (eq $iface "Node") }}
			// Copy create a copy of the node.
			func (n *{{ $model.Name }})Copy() store.Node {
				c := &{{ $model.Name }} {
					{{- range $field := $model.Fields }}
						{{- if (not .Slice) }}
							{{ $field.Name }}: n.{{ $field.Name }},
						{{- end }}
					{{- end}}
				}
				{{ range $field := $model.Fields }}
					{{- if .Slice }}
						c.{{ $field.Name }} = make({{ $field.Type | ref }}, len(n.{{ $field.Name }}))
						copy(c.{{ $field.Name }}, n.{{ $field.Name }})
					{{ end }}
				{{- end}}
				return c
			}
			
			// Store stores the {{ $model.Name }}.
			func (n *{{ $model.Name }}) Store(ctx context.Context) error {
				appCtx := appcontext.Get(ctx)
				nodes := appCtx.Nodes
				subs := appCtx.Subs
				identifiers, err := relay.DecodeID(n.ID)
				if err != nil {
					return err
				}
				if identifiers[0] != NodeType{{ $model.Name }} {
					return ErrType
				}
				var v interface{} = n
				if v, ok := v.(BeforeStorer); ok {
					v.BeforeStore(ctx)
				}
				nodes.Store(n.ID, n.Copy())
				subs.Publish(MessageType{{ $model.Name }}Stored, n.ID)
				if v, ok := v.(AfterStorer); ok {
					v.AfterStore(ctx)
				}
				return nil
			}
			
			// MustStore stores a {{ $model.Name }} or panics on failure.
			func (n *{{ $model.Name }}) MustStore(ctx context.Context) {
				if err := n.Store(ctx); err != nil {
					panic(err)
				}
			}

			// Load{{ $model.Name }} loads a {{ $model.Name }}.
			func Load{{ $model.Name }}(ctx context.Context, id string) (*{{ $model.Name }}, error) {
				nodes := appcontext.Get(ctx).Nodes
				identifiers, err := relay.DecodeID(id)
				if err != nil {
					return nil, err
				}
				if identifiers[0] != NodeType{{ $model.Name }} {
					return nil, ErrType
				}
				node, ok := nodes.Load(id)
				if !ok {
					return nil, ErrNotFound
				}
				return node.Copy().(*{{ $model.Name }}), nil
			}
			
			// MustLoad{{ $model.Name }} loads a {{ $model.Name }} or panics on failure.
			func MustLoad{{ $model.Name }}(ctx context.Context, id string) *{{ $model.Name }} {
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					panic(err)
				}
				return node
			}
			
			// Delete{{ $model.Name }} deletes a {{ $model.Name }}.
			func Delete{{ $model.Name }}(ctx context.Context, id string) error {
				appCtx := appcontext.Get(ctx)
				nodes := appCtx.Nodes
				subs := appCtx.Subs
				identifiers, err := relay.DecodeID(id)
				if err != nil {
					return err
				}
				if identifiers[0] != NodeType{{ $model.Name }} {
					return ErrType
				}
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					return err
				}
				var v interface{} = node
				if v, ok := v.(BeforeDeleter); ok {
					v.BeforeDelete(ctx)
				}
				nodes.Delete(id)
				subs.Publish(MessageType{{ $model.Name }}Deleted, id)
				if v, ok := v.(AfterDeleter); ok {
					v.AfterDelete(ctx)
				}
				return nil
			}
			
			// MustDelete{{ $model.Name }} deletes a {{ $model.Name }} or panics on failure.
			func MustDelete{{ $model.Name }}(ctx context.Context, id string) {
				err := Delete{{ $model.Name }}(ctx, id)
				if err != nil {
					panic(err)
				}
			}
			
			// Lock{{ $model.Name }} loads a {{ $model.Name }} and locks it until the callback returns.
			func Lock{{ $model.Name }}(ctx context.Context, id string, fn func(*{{ $model.Name }})) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					return err
				}
				fn(node)
				nodes.Unlock(id)
				return nil
			}
			
			// Lock{{ $model.Name }}E is like Lock{{ $model.Name }}, but the callback can return an error.
			func Lock{{ $model.Name }}E(ctx context.Context, id string, fn func(*{{ $model.Name }}) error) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					return err
				}
				err = fn(node)
				nodes.Unlock(id)
				return err
			}
			
			// MustLock{{ $model.Name }} loads a {{ $model.Name }} or panics on error and locks it until the callback returns.
			func MustLock{{ $model.Name }}(ctx context.Context, id string, fn func(*{{ $model.Name }})) {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					panic(err)
				}
				fn(node)
				nodes.Unlock(id)
			}
			
			// MustLock{{ $model.Name }}E is like MustLock{{ $model.Name }}, but the callback can return an error.
			func MustLock{{ $model.Name }}E(ctx context.Context, id string, fn func(*{{ $model.Name }}) error) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				node, err := Load{{ $model.Name }}(ctx, id)
				if err != nil {
					panic(err)
				}
				err = fn(node)
				nodes.Unlock(id)
			
				return err
			}
			
			// LockOrNew{{ $model.Name }} loads or initializes a {{ $model.Name }} and locks it until the callback returns.
			// The second argument of the callback is true if the model is new.
			func LockOrNew{{ $model.Name }}(ctx context.Context, id string, fn func(*{{ $model.Name }}, bool)) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				isNew := false
				node, err := Load{{ $model.Name }}(ctx, id)
				if err == ErrNotFound {
					isNew = true
					node = &{{ $model.Name }}{
						ID: id,
					}
				} else if err != nil {
					return err
				}
				fn(node, isNew)
				nodes.Unlock(id)
				return nil
			}
			
			// LockOrNew{{ $model.Name }}E is like LockOrNew{{ $model.Name }}, but the callback can return an error.
			func LockOrNew{{ $model.Name }}E(ctx context.Context, id string, fn func(*{{ $model.Name }}, bool) error) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				isNew := false
				node, err := Load{{ $model.Name }}(ctx, id)
				if err == ErrNotFound {
					isNew = true
					node = &{{ $model.Name }}{
						ID: id,
					}
				} else if err != nil {
					return err
				}
				err = fn(node, isNew)
				nodes.Unlock(id)
				return err
			}
			
			// MustLockOrNew{{ $model.Name }} loads or initializes a {{ $model.Name }} or panics on error and locks it until the callback returns.
			func MustLockOrNew{{ $model.Name }}(ctx context.Context, id string, fn func(*{{ $model.Name }}, bool)) {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				isNew := false
				node, err := Load{{ $model.Name }}(ctx, id)
				if err == ErrNotFound {
					isNew = true
					node = &{{ $model.Name }}{
						ID: id,
					}
				} else if err != nil {
					panic(err)
				}
				fn(node, isNew)
				nodes.Unlock(id)
			}
			
			// MustLockOrNew{{ $model.Name }}E is like MustLockOrNew{{ $model.Name }}, but the callback can return an error.
			func MustLockOrNew{{ $model.Name }}E(ctx context.Context, id string, fn func(*{{ $model.Name }}, bool) error) error {
				nodes := appcontext.Get(ctx).Nodes
				nodes.Lock(id)
				isNew := false
				node, err := Load{{ $model.Name }}(ctx, id)
				if err == ErrNotFound {
					isNew = true
					node = &{{ $model.Name }}{
						ID: id,
					}
				} else if err != nil {
					panic(err)
				}
				err = fn(node, isNew)
				nodes.Unlock(id)
				return err
			}
		{{- end }}
	{{- end }}
{{- end }}
