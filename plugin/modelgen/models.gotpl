{{ reserveImport "context" }}
{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "strconv" }}
{{ reserveImport "time" }}
{{ reserveImport "sync" }}
{{ reserveImport "errors" }}
{{ reserveImport "bytes" }}

{{ reserveImport "github.com/vektah/gqlparser" }}
{{ reserveImport "github.com/vektah/gqlparser/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{- range $model := .Interfaces }}
	{{ with .Description }} {{.|prefixLines "// "}} {{ end }}
	type {{.Name }} interface {
		Is{{.Name }}()
	}
{{- end }}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{ .Name }} struct {
		{{- range $field := .Fields }}
			{{- with .Description }}
				{{.|prefixLines "// "}}
			{{- end}}
			{{ $field.Name }} {{ $field.Type | ref }} `{{ $field.Tag }}`
		{{- end }}
	}

	{{- range $iface := .Implements }}
		// Is{{ $iface }} declares that {{ $model.Name }} implements {{ $iface }}.
		func ({{ $model.Name }}) Is{{ $iface }}() {}
	{{- end }}

	{{- range $field := $model.Fields }}
		// Get{{ $field.Name }} returns the {{ $field.Name }}.
		func (n *{{ $model.Name }})Get{{ $field.Name }}() {{ $field.Type | ref }} {
			return n.{{ $field.Name }}
		}

		// Set{{ $field.Name }} sets the {{ $field.Name }}.
		func (n *{{ $model.Name }})Set{{ $field.Name }}(value {{ $field.Type | ref }}) {
			n.{{ $field.Name }} = value
		}
	{{- end }}
{{- end }}

{{ range $enum := .Enums }}
	{{ with .Description }} {{.|prefixLines "// "}} {{end}}
	type {{.Name }} string
	const (
	{{- range $value := .Values}}
		{{- with .Description}}
			{{.|prefixLines "// "}}
		{{- end}}
		{{ $enum.Name }}{{ .Name }} {{$enum.Name }} = {{.Value|quote}}
	{{- end }}
	)

	var All{{.Name }} = []{{ .Name }}{
	{{- range $value := .Values}}
		{{$enum.Name }}{{ .Name }},
	{{- end }}
	}

	func (e {{.Name }}) IsValid() bool {
		switch e {
		case {{ range $index, $element := .Values}}{{if $index}},{{end}}{{ $enum.Name }}{{ $element.Name }}{{end}}:
			return true
		}
		return false
	}

	func (e {{.Name }}) String() string {
		return string(e)
	}

	func (e *{{.Name }}) UnmarshalGQL(v interface{}) error {
		str, ok := v.(string)
		if !ok {
			return fmt.Errorf("enums must be strings")
		}
		*e = {{ .Name }}(str)
		if !e.IsValid() {
			return fmt.Errorf("%s is not a valid {{ .Raw }}", str)
		}
		return nil
	}

	func (e {{.Name }}) MarshalGQL(w io.Writer) {
		fmt.Fprint(w, strconv.Quote(e.String()))
	}

{{- end }}
