{{ reserveImport "context" }}
{{ reserveImport "encoding/base64" }}
{{ reserveImport "strconv" }}

{{ reserveImport "groundcontrol/models" }}

{{ $root := . }}

{{- range $subscription := .Stored }}
func (r *subscriptionResolver) {{ .TypeName }}Stored(ctx context.Context, id *string, lastMessageID *string) (<-chan {{ .Type | ref }}, error) {
	ctx = models.WithModelContext(ctx, r.ModelCtx)
	ch := make(chan {{ .Type | ref }}, SubscriptionChannelSize)

	last := uint64(0)
	if lastMessageID != nil {
		var err error
		last, err = decodeBase64Uint64(*lastMessageID)
		if err != nil {
			return nil, err
		}
	}

	r.ModelCtx.Subs.Subscribe(ctx, models.MessageType{{ .TypeName }}Stored, last, func(msg interface{}) {
		nodeID := msg.(string)
		if id != nil && *id != nodeID {
			return
		}
		select {
		case ch <- models.MustLoad{{ .TypeName }}(ctx, nodeID):
		default:
		}
	})

	return ch, nil
}
{{- end }}

{{- range $subscription := .Stored }}
func (r *subscriptionResolver) {{ .TypeName }}Deleted(ctx context.Context, id *string, lastMessageID *string) (<-chan {{ $root.DeletedType | ref }}, error) {
	ctx = models.WithModelContext(ctx, r.ModelCtx)
	ch := make(chan {{ $root.DeletedType | ref }}, SubscriptionChannelSize)

	last := uint64(0)
	if lastMessageID != nil {
		var err error
		last, err = decodeBase64Uint64(*lastMessageID)
		if err != nil {
			return nil, err
		}
	}

	r.ModelCtx.Subs.Subscribe(ctx, models.MessageType{{ .TypeName }}Deleted, last, func(msg interface{}) {
		nodeID := msg.(string)
		if id != nil && *id != nodeID {
			return
		}
		select {
		case ch <- &{{ $root.DeletedName }}{ID: nodeID}:
		default:
		}
	})

	return ch, nil
}
{{- end }}

func decodeBase64Uint64(str string) (uint64, error) {
	data, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return 0, err
	}

	return strconv.ParseUint(string(data), 10, 64)
}
