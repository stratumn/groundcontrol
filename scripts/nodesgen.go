// Copyright 2019 Stratumn
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//+build ignore

package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"text/template"
)

func checkError(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func main() {
	types := flag.String("t", "", "A comma separated list of types")
	filename := flag.String("o", "", "A filename to output the generated code to")
	flag.Parse()

	w := os.Stdout

	if *filename != "" {
		f, err := os.OpenFile(*filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		checkError(err)

		defer f.Close()
		defer f.Sync()

		w = f
	}

	t, err := template.New("tmpl").Parse(strings.TrimSpace(tmpl))
	checkError(err)

	err = t.Execute(w, strings.Split(*types, ","))
	checkError(err)
}

var tmpl = `
// Code generated by groundcontrol/scripts/nodesgen.go, DO NOT EDIT.

package models

import (
	"context"

	"groundcontrol/relay"
)

// Node types.
const (
{{- range $index, $type := .}}
	NodeType{{$type}} = "{{$type}}"
{{- end}}
)

// Message types.
const (
{{- range $index, $type := .}}
	MessageType{{$type}}Stored = "{{$type}}Stored"
	MessageType{{$type}}Deleted = "{{$type}}Deleted"
{{- end}}
)

{{range $index, $type := .}}
// Load{{$type}} loads a {{$type}}.
func Load{{$type}}(ctx context.Context, id string) ({{$type}}, error) {
	nodes := GetModelContext(ctx).Nodes

	identifiers, err := relay.DecodeID(id)
	if err != nil {
		return {{$type}}{}, err
	}
	if identifiers[0] != NodeType{{$type}} {
		return {{$type}}{}, ErrType
	}
	node, ok := nodes.Load(id)
	if !ok {
		return {{$type}}{}, ErrNotFound
	}

	return node.({{$type}}), nil
}

// MustLoad{{$type}} loads a {{$type}} or panics on failure.
func MustLoad{{$type}}(ctx context.Context, id string) {{$type}} {
	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		panic(err)
	}

	return node
}

// Delete{{$type}} deletes a {{$type}}.
func Delete{{$type}}(ctx context.Context, id string) error {
	modelCtx := GetModelContext(ctx)
	nodes := modelCtx.Nodes
	subs := modelCtx.Subs

	identifiers, err := relay.DecodeID(id)
	if err != nil {
		return err
	}
	if identifiers[0] != NodeType{{$type}} {
		return ErrType
	}

	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		return err
	}

	var v interface{} = node

	if v, ok := v.(BeforeDeleter); ok {
		v.BeforeDelete(ctx)
	}

	nodes.Delete(id)
	subs.Publish(MessageType{{$type}}Deleted, id)

	if v, ok := v.(AfterDeleter); ok {
		v.AfterDelete(ctx)
	}

	return nil
}

// MustDelete{{$type}} deletes a {{$type}} or panics on failure.
func MustDelete{{$type}}(ctx context.Context, id string) {
	err := Delete{{$type}}(ctx, id)
	if err != nil {
		panic(err)
	}
}

// Lock{{$type}} loads a {{$type}} and locks it until the callback returns.
func Lock{{$type}}(ctx context.Context, id string, fn func({{$type}})) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		return err
	}

	fn(node)
	nodes.Unlock(id)

	return nil
}

// Lock{{$type}}E is like Lock{{$type}}, but the callback can return an error.
func Lock{{$type}}E(ctx context.Context, id string, fn func({{$type}}) error) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		return err
	}

	err = fn(node)
	nodes.Unlock(id)

	return err
}

// MustLock{{$type}} loads a {{$type}} or panics on error and locks it until the callback returns.
func MustLock{{$type}}(ctx context.Context, id string, fn func({{$type}})) {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		panic(err)
	}

	fn(node)
	nodes.Unlock(id)
}

// MustLock{{$type}}E is like MustLock{{$type}}, but the callback can return an error.
func MustLock{{$type}}E(ctx context.Context, id string, fn func({{$type}}) error) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err != nil {
		panic(err)
	}

	err = fn(node)
	nodes.Unlock(id)

	return err
}

// LockOrNew{{$type}} loads or initializes a {{$type}} and locks it until the callback returns.
func LockOrNew{{$type}}(ctx context.Context, id string, fn func({{$type}})) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err == ErrNotFound {
		node = {{$type}}{
			ID: id,
		}
	} else if err != nil {
		return err
	}

	fn(node)
	nodes.Unlock(id)

	return nil
}

// LockOrNew{{$type}}E is like LockOrNew{{$type}}, but the callback can return an error.
func LockOrNew{{$type}}E(ctx context.Context, id string, fn func({{$type}}) error) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err == ErrNotFound {
		node = {{$type}}{
			ID: id,
		}
	} else if err != nil {
		return err
	}

	err = fn(node)
	nodes.Unlock(id)

	return err
}

// MustLockOrNew{{$type}} loads or initializes a {{$type}} or panics on error and locks it until the callback returns.
func MustLockOrNew{{$type}}(ctx context.Context, id string, fn func({{$type}})) {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err == ErrNotFound {
		node = {{$type}}{
			ID: id,
		}
	} else if err != nil {
		panic(err)
	}

	fn(node)
	nodes.Unlock(id)
}

// MustLockOrNew{{$type}}E is like MustLockOrNew{{$type}}, but the callback can return an error.
func MustLockOrNew{{$type}}E(ctx context.Context, id string, fn func({{$type}}) error) error {
	nodes := GetModelContext(ctx).Nodes
	nodes.Lock(id)

	node, err := Load{{$type}}(ctx, id)
	if err == ErrNotFound {
		node = {{$type}}{
			ID: id,
		}
	} else if err != nil {
		panic(err)
	}

	err = fn(node)
	nodes.Unlock(id)

	return err
}

// GetID returns the unique ID of the node.
func (n {{$type}}) GetID() string {
	return n.ID
}

// Store stores the {{$type}}.
func (n {{$type}}) Store(ctx context.Context) error {
	modelCtx := GetModelContext(ctx)
	nodes := modelCtx.Nodes
	subs := modelCtx.Subs

	identifiers, err := relay.DecodeID(n.ID)
	if err != nil {
		return err
	}
	if identifiers[0] != NodeType{{$type}} {
		return ErrType
	}

	var v interface{} = n

	if v, ok := v.(BeforeStorer); ok {
		v.BeforeStore(ctx)
	}

	nodes.Store(n.ID, n)
	subs.Publish(MessageType{{$type}}Stored, n.ID)

	if v, ok := v.(AfterStorer); ok {
		v.AfterStore(ctx)
	}

	return nil
}

// MustStore stores a {{$type}} or panics on failure.
func (n {{$type}}) MustStore(ctx context.Context) {
	if err := n.Store(ctx); err != nil {
		panic(err)
	}
}

{{end}}
`
